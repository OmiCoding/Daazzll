generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int            @id @default(autoincrement())
  fName     String         @db.VarChar(255)
  lName     String         @db.VarChar(255)
  email     String
  createdAt DateTime       @default(now())
  pass      String
  updatedAt DateTime       @updatedAt
  username  String         @db.VarChar(255)
  role      String
  isAdmin   Boolean        @default(false)
  channels  Channel[]
  analytics UserAnalytics?
  settings  UserSettings?

  @@unique([email, username])
}

model UserAnalytics {
  userId        Int            @id
  user          User           @relation(fields: [userId], references: [id])
  votedChannels Channel_Vote[]
  votedPosts    Post_Vote[]
  votedShorts   Short_Vote[]
}

model UserSettings {
  userId Int     @id
  theme  Boolean @default(false)
  user   User    @relation(fields: [userId], references: [id])
}

model Channel {
  id        Int            @id @default(autoincrement())
  type      String
  name      String         @db.VarChar(100)
  userId    Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  votes     Channel_Vote[]
  posts     Post[]
}

model Channel_Vote {
  id        Int           @id @default(autoincrement())
  like      Boolean       @default(false)
  dislike   Boolean       @default(false)
  channelId Int
  userId    Int
  channel   Channel       @relation(fields: [channelId], references: [id])
  user      UserAnalytics @relation(fields: [userId], references: [userId])
}

model Post {
  id        Int         @id @default(autoincrement())
  type      String
  title     String
  channelId Int
  video     String?
  postText  String?
  image     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  channel   Channel     @relation(fields: [channelId], references: [id])
  votes     Post_Vote[]
}

model Post_Vote {
  id      Int           @id @default(autoincrement())
  like    Boolean       @default(false)
  dislike Boolean       @default(false)
  postId  Int
  userId  Int
  post    Post          @relation(fields: [postId], references: [id])
  user    UserAnalytics @relation(fields: [userId], references: [userId])
}

model Short {
  id         Int          @id @default(autoincrement())
  video      String
  createdAt  DateTime     @default(now())
  updateAt   DateTime     @updatedAt
  shortVotes Short_Vote[]
}

model Short_Vote {
  id      Int           @id @default(autoincrement())
  like    Boolean       @default(false)
  dislike Boolean       @default(false)
  shortId Int
  userId  Int
  short   Short         @relation(fields: [shortId], references: [id])
  user    UserAnalytics @relation(fields: [userId], references: [userId])
}
