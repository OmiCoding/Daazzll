generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id        Int            @id @default(autoincrement())
  fName     String         @db.VarChar(255)
  lName     String         @db.VarChar(255)
  email     String
  createdAt DateTime       @default(now())
  pass      String
  updatedAt DateTime       @updatedAt
  username  String         @db.VarChar(255)
  role      String
  isAdmin   Boolean        @default(false)
  channels  channels[]
  analytics acc_analytics?
  settings  acc_settings?
  profile   acc_profiles?

  @@unique([email, username])
}

model acc_analytics {
  userId        Int             @id
  user          accounts        @relation(fields: [userId], references: [id])
  votedChannels channel_votes[]
  votedPosts    post_votes[]
  votedShorts   short_votes[]
}

model acc_settings {
  userId Int      @id
  theme  Boolean  @default(false)
  user   accounts @relation(fields: [userId], references: [id])
}

model acc_profiles {
  userId    Int      @id
  pitch     String?
  website   String?
  discord   String?
  facebook  String?
  instagram String?
  twitter   String?
  user      accounts @relation(fields: [userId], references: [id])
}

model channels {
  id        Int             @id @default(autoincrement())
  type      String
  name      String          @db.VarChar(100)
  userId    Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      accounts        @relation(fields: [userId], references: [id])
  votes     channel_votes[]
  posts     posts[]
}

model channel_votes {
  id        Int           @id @default(autoincrement())
  like      Boolean       @default(false)
  dislike   Boolean       @default(false)
  channelId Int
  userId    Int
  channel   channels      @relation(fields: [channelId], references: [id])
  user      acc_analytics @relation(fields: [userId], references: [userId])
}

model posts {
  id        Int          @id @default(autoincrement())
  type      String
  title     String
  channelId Int
  video     String?
  postText  String?
  image     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  channel   channels     @relation(fields: [channelId], references: [id])
  votes     post_votes[]
}

model post_votes {
  id      Int           @id @default(autoincrement())
  like    Boolean       @default(false)
  dislike Boolean       @default(false)
  postId  Int
  userId  Int
  post    posts         @relation(fields: [postId], references: [id])
  user    acc_analytics @relation(fields: [userId], references: [userId])
}

model shorts {
  id         Int           @id @default(autoincrement())
  video      String
  createdAt  DateTime      @default(now())
  updateAt   DateTime      @updatedAt
  shortVotes short_votes[]
}

model short_votes {
  id      Int           @id @default(autoincrement())
  like    Boolean       @default(false)
  dislike Boolean       @default(false)
  shortId Int
  userId  Int
  short   shorts        @relation(fields: [shortId], references: [id])
  user    acc_analytics @relation(fields: [userId], references: [userId])
}
