generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id          Int            @id @default(autoincrement())
  fName       String         @db.VarChar(255)
  lName       String         @db.VarChar(255)
  email       String
  createdAt   DateTime       @default(now())
  pass        String
  updatedAt   DateTime       @updatedAt
  username    String         @db.VarChar(255)
  role        String
  isAdmin     Boolean        @default(false)
  analytics acc_analytics?
  settings  acc_settings?
  profile   acc_profiles?
  designs   designs[]

  @@unique([email, username])
}

model acc_analytics {
  userId        Int             @id
  user          accounts        @relation(fields: [userId], references: [id])
}

model acc_settings {
  userId Int                    @id
  theme  Boolean                @default(false)
  user   accounts               @relation(fields: [userId], references: [id])
}

model acc_profiles {
  id        Int             @id @default(autoincrement())
  pitch     String?
  userId    Int             @unique         
  user      accounts        @relation(fields: [userId], references: [id])
  social    acc_socials?
  avatar    acc_avatars?  
  banner    acc_banners?
}

model acc_socials {
  id        Int             @id @default(autoincrement())
  website   String?
  discord   String?
  facebook  String?
  instagram String?
  twitter   String?
  profileId Int             @unique
  profile   acc_profiles    @relation(fields: [profileId], references: [userId])
}

model acc_avatars {
  id        Int             @id @default(autoincrement())
  imageId   String
  ext       String
  type      String
  url       String
  folder    String
  version   Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  profileId Int             @unique
  profile   acc_profiles    @relation(fields: [profileId], references: [userId])
}

model acc_banners {
  id        Int           @id @default(autoincrement())
  imageId   String
  ext       String
  type      String
  url       String
  folder    String
  version   Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  profileId Int           @unique
  profile   acc_profiles  @relation(fields: [profileId], references: [userId])
}

model designs {
  id        Int             @id @default(autoincrement())
  imageId   String
  ext       String
  type      String
  url       String
  folder    String
  version   Int
  createdAt DateTime        @default(now())
  userId    Int             
  user      accounts        @relation(fields: [userId], references: [id])
}

