# Specifying the image that we will use within the DockerFile
FROM node:16-bullseye-slim AS builder

RUN adduser node node

RUN mkdir /home/node/src

WORKDIR /home/node/src

COPY ./keys ./keys/

COPY --chown=node:node ./client ./client/

COPY --chown=node:node ./svgs ./svgs/

COPY --chown=node:node ./@types ./@types/

COPY --chown=node:node ./@types ./@types/

COPY --chown=node:node package-lock.json package.json ./

COPY --chown=node:node webpack.client.js webpack.config.js webpack.server.js ./

COPY --chown=node:node .eslintrc.js .eslintignore ./

COPY --chown=node:node .env.test babel.config.js postcss.config.js tsconfig.json ./

COPY --chown=node:node ./server ./server/

COPY --chown=node:node ./certs/daazzll.dev* ./certs/

COPY --chown=node:node ./prisma ./prisma/

RUN npm ci && npm run babel:server:test && npm run build:test

RUN npm prune --production

###### - Stage 2 - run server ######

FROM node:16-bullseye-slim

RUN adduser node node

RUN mkdir /home/node/src

WORKDIR /home/node/src

COPY ./keys ./keys/

COPY --chown=node:node ./svgs ./svgs/

COPY --chown=node:node package-lock.json package.json ./

COPY --chown=node:node .env.test ./

COPY --chown=node:node ./certs/daazzll.dev* ./certs/

COPY --chown=node:node ./prisma ./prisma

COPY --from=builder /home/node/src/build ./build 

COPY --from=builder /home/node/src/lib ./lib

COPY --from=builder /home/node/src/node_modules ./node_modules

EXPOSE 8080

CMD ["npm", "run", "docker:start"]